(module
    ;; This benchmark tests the speed of array operations in wasm vs js.
    ;; Here are some results. Note that this was run on an m1 macbook pro,
    ;; so expect Safari to run fast.
    (;
     CHROME:
        WASM: ~61ms
        JS: ~115ms
     SAFARI:
        WASM: ~56ms
        JS: ~65ms
     FIREFOX:
        WASM: ~250ms
        JS: ~310ms
    ;)
    ;; Chrome has by far the most stable times, while Safari and FF are
    ;; less predictable and can change by a 10 or more ms per attempt

    ;; import memory
    (import "js" "memory" (memory 1))

    (global $arrLength i32 10000i32)

    (func $fillArr (export "fill")
        (l$index i32)
        (l$arr i32)
        
        call $initStack
        call $stackAllocate((i32.mul (global.get $arrLength) 4i32)) ;; each member of arr is 4 bytes long
        $arr = stack

        $index = 0i32
        loop
            ;; bit janky because the condition is checked after. how else to do this?
            (i32.store (i32.add $index $arr ) $index)

            ;; increment
            $index = (i32.add $index 1i32)

            $index
            global.get $arrLength
            i32.lt_u
            br_if 0
        end
        call $terminateStack
    )

    (func (export "main")
        (l$i i32)

        ;; execute fill 10,000 times
        $i = 0i32
        loop
            call $fillArr
            
            $i = (i32.add $i 1i32)

            $i
            10000i32
            i32.lt_u
            br_if 0
        end
    )

    (global $STACK_POINTER (mut i32) (i32.const 8))
    (global $FRAME_POINTER (mut i32) (i32.const 8))
    (global $STACK_ORIGIN i32 (i32.const 8))

    ;; initalize the stack frame
    (func $initStack
        (local $prevFramePointer i32)
        (local.set $prevFramePointer (global.get $FRAME_POINTER) )

        (global.set $FRAME_POINTER (global.get $STACK_POINTER) )

        ;; Store the previous frame's location as the first item in the new frame
        i32.const 4 ;; i32
        call $stackAllocate
        local.get $prevFramePointer
        i32.store
    )
    (func $terminateStack
        ;; the previous frame's location is the first 4 bytes of the current frame
        (global.set $STACK_POINTER (global.get $FRAME_POINTER) )
        (global.set $FRAME_POINTER (i32.load (global.get $FRAME_POINTER)) )
    )
    (func $stackAllocate
        (param $length i32) ;; length in bytes
        (result i32) ;; offset in memory
        (local $allocatedPtr i32)

        ;; set the location of the allocated memory
        (local.set $allocatedPtr (global.get $STACK_POINTER) )

        ;; update the stack pointer
        (global.set $STACK_POINTER (i32.add (global.get $STACK_POINTER) (local.get $length) ))
        
        ;; return the location of the allocated memory
        local.get $allocatedPtr
    )
)